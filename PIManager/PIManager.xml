<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>PIManager</name>
  </assembly>
  <members>
    <member name="N:PIManager">
    </member>
    <member name="T:PIManager._Default">
    </member>
    <member name="N:PIManager.Account">
    </member>
    <member name="T:PIManager.Account.ChangePassword">
    </member>
    <member name="N:PIManager.Student">
    </member>
    <member name="T:PIManager.Student.Student">
    </member>
    <member name="T:PIManager.Account.Login">
    </member>
    <member name="T:PIManager.AddDocument">
    </member>
    <member name="N:PIManager.Models">
    </member>
    <member name="T:PIManager.Models.Technology">
      <summary>
Represent a technology</summary>
    </member>
    <member name="M:PIManager.Models.Technology.#ctor(System.Int32,System.String)">
      <summary>
Constructor</summary>
      <param name="id">
Id of the technology</param>
      <param name="name">
Name of the technology</param>
    </member>
    <member name="P:PIManager.Models.Technology.Id">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Technology.Name">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="N:PIManager.DAO">
    </member>
    <member name="T:PIManager.DAO.ProjectAccess">
      <summary>
Gets information about projects from the database in the model form. This is a Data Access Object (DAO)</summary>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.#ctor">
      <summary>
Constructor</summary>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getProjectList">
      <summary>
Gets a list of projects that are opened for the inscription.</summary>
      <returns>
List of projects opened for inscription</returns>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getInscriptions(System.Int32)">
      <summary>
Gets list of inscriptions for a given person</summary>
      <returns>
A list containing the project the person is subscribed to or an empty list</returns>
      <param name="idPerson">
Id of a person connected to the system</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.saveInscription(System.Int32,System.Int32)">
      <summary>
Subscribe a student on a project.</summary>
      <returns>
true if inscription has been done, otherwise false</returns>
      <param name="idPerson">
id of the student</param>
      <param name="idProject">
id of the project</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.cancelInscription(System.Int32)">
      <summary>
Unsubscribe a student from a project.</summary>
      <returns>
true if subscription has been canceled, otherwise false</returns>
      <param name="idPerson">
id of the student</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.addDocument(System.Int32,System.Web.HttpPostedFile)">
      <summary>
Adds a document to a project</summary>
      <returns>
true if adding has been done, otherwise false</returns>
      <param name="pk_project">
id of the project</param>
      <param name="file">
file to add</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.checkPeriodInscriptionOpen">
      <summary>
Checks if the period of inscription to the projects is still opened.</summary>
      <returns>
true if it is opened, otherwise false</returns>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getProjects">
      <summary>
Get all the projects that are not opened to show, modify or inherit them</summary>
      <returns>
A list of projects</returns>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getProject(System.Int32)">
      <summary>
Get a project with all its informations</summary>
      <returns>
A project with its informations</returns>
      <param name="id">
The id of hte project to retrieve</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.addProject(PIManager.Models.Project,System.Collections.Generic.List{PIManager.Models.Technology})">
      <summary>
Add a new project to the database</summary>
      <param name="newProject">
The new project to add</param>
      <param name="projectTechnos">
The list if technologies associated with this new project</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.modifyProject(PIManager.Models.Project,PIManager.Models.Project,System.Collections.Generic.List{PIManager.Models.Technology})">
      <summary>
Modify an existing project from the database</summary>
      <returns>
true if the project has been added, false otherwise (the project doesn't exist or has been modified before by someone else)</returns>
      <param name="oldProject">
The informations of the project before modifying it</param>
      <param name="newProject">
The new informations to put for this project</param>
      <param name="projectTechnos">
The list if technologies associated with this project</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.deleteProject(System.Int32)">
      <summary>
Delete an existing project from the database</summary>
      <param name="id">
The id of the project to delete</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.openRegistration(System.Collections.Generic.HashSet{System.Int32},System.DateTime,System.DateTime)">
      <param name="ids">
</param>
      <param name="dateOpen">
</param>
      <param name="dateClose">
</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getProjectInscriptions">
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getFullProject">
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getPersonCompletName(System.Int32)">
      <param name="pk_person">
</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getProjectGroup(System.Int32)">
      <param name="pk_project">
</param>
    </member>
    <member name="M:PIManager.DAO.ProjectAccess.getTechnologyProject(System.Int32)">
      <param name="pk_project">
</param>
    </member>
    <member name="T:PIManager.ManageProjects">
      <summary>
Page to manage projects that are still not opened to the students</summary>
    </member>
    <member name="T:PIManager.DAO.TechnologyAccess">
      <summary>
Gets information about technologies from the database in the model form. This is a Data Access Object (DAO)</summary>
    </member>
    <member name="M:PIManager.DAO.TechnologyAccess.#ctor">
      <summary>
Constructor</summary>
    </member>
    <member name="M:PIManager.DAO.TechnologyAccess.getTechnologies">
      <summary>
Get all the technologies stored in the database</summary>
      <returns>
A dictionnary indexed by the technology ids</returns>
    </member>
    <member name="T:PIManager.ModifyProject">
      <summary>
Page to modify a projectthat is still not opened to the students</summary>
    </member>
    <member name="T:PIManager.SiteMaster">
    </member>
    <member name="T:PIManager.Account.AddProject">
    </member>
    <member name="N:PIManager.Visualization">
    </member>
    <member name="T:PIManager.Visualization.VisuProjectStudent">
    </member>
    <member name="T:PIManager.About">
    </member>
    <member name="N:PIManager.Professor">
    </member>
    <member name="T:PIManager.Professor.VisualizationGroup">
    </member>
    <member name="T:PIManager.Professor.Professor">
    </member>
    <member name="N:PIManager.Login">
    </member>
    <member name="T:PIManager.Login.MemberShipPIProvider">
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.ChangePassword(System.String,System.String,System.String)">
      <param name="username">
</param>
      <param name="oldPassword">
</param>
      <param name="newPassword">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
      <param name="username">
</param>
      <param name="password">
</param>
      <param name="newPasswordQuestion">
</param>
      <param name="newPasswordAnswer">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
      <param name="username">
</param>
      <param name="password">
</param>
      <param name="email">
</param>
      <param name="passwordQuestion">
</param>
      <param name="passwordAnswer">
</param>
      <param name="isApproved">
If set to <see langword="true" />, then ; otherwise, .</param>
      <param name="providerUserKey">
</param>
      <param name="status">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.DeleteUser(System.String,System.Boolean)">
      <param name="username">
</param>
      <param name="deleteAllRelatedData">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
      <param name="emailToMatch">
</param>
      <param name="pageIndex">
</param>
      <param name="pageSize">
</param>
      <param name="totalRecords">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
      <param name="usernameToMatch">
</param>
      <param name="pageIndex">
</param>
      <param name="pageSize">
</param>
      <param name="totalRecords">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
      <param name="pageIndex">
</param>
      <param name="pageSize">
</param>
      <param name="totalRecords">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.GetNumberOfUsersOnline">
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.GetPassword(System.String,System.String)">
      <param name="username">
</param>
      <param name="answer">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.GetUser(System.String,System.Boolean)">
      <param name="username">
</param>
      <param name="userIsOnline">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.GetUser(System.Object,System.Boolean)">
      <param name="providerUserKey">
</param>
      <param name="userIsOnline">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.GetUserNameByEmail(System.String)">
      <param name="email">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.ResetPassword(System.String,System.String)">
      <param name="username">
</param>
      <param name="answer">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.UnlockUser(System.String)">
      <param name="userName">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.UpdateUser(System.Web.Security.MembershipUser)">
      <param name="user">
</param>
    </member>
    <member name="M:PIManager.Login.MemberShipPIProvider.ValidateUser(System.String,System.String)">
      <param name="username">
</param>
      <param name="password">
</param>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.EnablePasswordRetrieval">
      <summary>
Gets a value indicating whether .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.ApplicationName">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.PasswordFormat">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.RequiresQuestionAndAnswer">
      <summary>
Gets a value indicating whether .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.RequiresUniqueEmail">
      <summary>
Gets a value indicating whether .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.PasswordStrengthRegularExpression">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.PasswordAttemptWindow">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.MinRequiredNonAlphanumericCharacters">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.EnablePasswordReset">
      <summary>
Gets a value indicating whether .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.MinRequiredPasswordLength">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIProvider.MaxInvalidPasswordAttempts">
      <summary>
Gets .</summary>
    </member>
    <member name="T:PIManager.Professor.AddProject">
      <summary>
Page to add a project, choosing between a new or an inherited one</summary>
    </member>
    <member name="T:PIManager.Professor.VisualizationInscription">
    </member>
    <member name="T:PIManager.Professor.AddNewProject">
      <summary>
Page to add a new project</summary>
    </member>
    <member name="T:PIManager.Student.Default">
    </member>
    <member name="T:PIManager.Models.Person">
      <summary>
Represent a person</summary>
    </member>
    <member name="M:PIManager.Models.Person.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
      <summary>
Constructor</summary>
      <param name="id">
Id of the person</param>
      <param name="lastName">
Last name of the person</param>
      <param name="firstName">
First name of the person</param>
      <param name="email">
Email of the person</param>
      <param name="login">
Login of the person</param>
      <param name="role">
Role of the person (student or professor)</param>
    </member>
    <member name="P:PIManager.Models.Person.Email">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Person.CompleteName">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Models.Person.Login">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Person.Role">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Person.LastName">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Person.Id">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Person.FirstName">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:PIManager.Account.Register">
    </member>
    <member name="T:PIManager.Professor.AddInheritedProject">
      <summary>
Page to add a project inherited from an existing one</summary>
    </member>
    <member name="T:PIManager.Professor.OpenProject">
      <summary>
Page to open projects to the registration for students</summary>
    </member>
    <member name="T:PIManager.Account.ChangePasswordSuccess">
    </member>
    <member name="T:PIManager.Global">
    </member>
    <member name="M:PIManager.Professor.OpenProject.onCheckboxChanged(System.Object,System.EventArgs)">
      <param name="sender">
The source of the event.</param>
      <param name="e">
An <see cref="T:System.EventArgs">EventArgs</see> that contains the event data.</param>
    </member>
    <member name="T:PIManager.Models.Project">
      <summary>
Represent a project</summary>
    </member>
    <member name="M:PIManager.Models.Project.#ctor(System.String,System.String,System.String,System.Int32)">
      <summary>
Constructor</summary>
      <param name="name">
Name of the project</param>
      <param name="abreviation">
Abreviation of the project</param>
      <param name="desc">
Description of the project</param>
      <param name="nbStudents">
Number of students for this project</param>
    </member>
    <member name="M:PIManager.Models.Project.#ctor(System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>
Constructor</summary>
      <param name="name">
Name of the project</param>
      <param name="abreviation">
Abreviation of the project</param>
      <param name="desc">
Description of the project</param>
      <param name="nbStudents">
Number of students for this project</param>
      <param name="clientId">
Id of the client of this project</param>
    </member>
    <member name="M:PIManager.Models.Project.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
Constructor</summary>
      <param name="name">
Name of the project</param>
      <param name="abreviation">
Abreviation of the project</param>
      <param name="desc">
Description of the project</param>
      <param name="nbStudents">
Number of students for this project</param>
      <param name="clientId">
Id of the client of this project</param>
      <param name="parentId">
Id of the parent of this project</param>
    </member>
    <member name="M:PIManager.Models.Project.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32)">
      <summary>
Constructor</summary>
      <param name="id">
Id of the project</param>
      <param name="name">
Name of the project</param>
      <param name="abreviation">
Abreviation of the project</param>
      <param name="desc">
Description of the project</param>
      <param name="nbStudents">
Number of students for this project</param>
      <param name="clientId">
Id of the client of this project</param>
    </member>
    <member name="M:PIManager.Models.Project.#ctor(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
Constructor</summary>
      <param name="id">
Id of the project</param>
      <param name="name">
Name of the project</param>
      <param name="abreviation">
Abreviation of the project</param>
      <param name="desc">
Description of the project</param>
      <param name="nbStudents">
Number of students for this project</param>
      <param name="clientId">
Id of the client of this project</param>
      <param name="parentId">
Id of the parent of this project</param>
    </member>
    <member name="M:PIManager.Models.Project.AddTechnologyId(System.Int32)">
      <param name="id">
</param>
    </member>
    <member name="M:PIManager.Models.Project.AddPersonInInscriptions(PIManager.Models.Person)">
      <param name="person">
</param>
    </member>
    <member name="M:PIManager.Models.Project.AddTechnologyInMyTechnology(PIManager.Models.Technology)">
      <param name="technology">
</param>
    </member>
    <member name="M:PIManager.Models.Project.isEquivalent(PIManager.Models.Project)">
      <param name="other">
</param>
    </member>
    <member name="P:PIManager.Models.Project.Id">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.Description">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.Abreviation">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.ParentId">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.TechnologyIds">
      <summary>
Gets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.NbStudents">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.Name">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.ClientId">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Models.Project.Inscriptions">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="T:PIManager.Login.MemberShipPIUser">
    </member>
    <member name="M:PIManager.Login.MemberShipPIUser.#ctor(System.Int32,System.String,System.Boolean)">
      <summary>
Initializes a new instance of the <see cref="T:PIManager.Login.MemberShipPIUser">MemberShipPIUser</see> class.</summary>
      <param name="pkPerson">
</param>
      <param name="userName">
</param>
      <param name="isOnline">
If set to <see langword="true" />, then ; otherwise, .</param>
    </member>
    <member name="P:PIManager.Login.MemberShipPIUser.IsOnline">
      <summary>
Gets or sets a value indicating whether this instance .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIUser.UserName">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="P:PIManager.Login.MemberShipPIUser.PkPerson">
      <summary>
Gets or sets .</summary>
    </member>
    <member name="M:PIManager.Visualization.VisuProjectStudent.subscribe_Click(System.Object,System.EventArgs)">
      <summary>
Does the subscription of the student to the given project when "subscribe"-link is clicked.</summary>
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:PIManager.Visualization.VisuProjectStudent.unsubscribe_Click(System.Object,System.EventArgs)">
      <summary>
Cancels the subscription of the student when "unsubscribe"-link is clicked.</summary>
      <param name="sender">
"unsubscribe"-link that was clicked on</param>
      <param name="e">
arguments given to this command (person id)</param>
    </member>
    <member name="M:PIManager.Visualization.VisuProjectStudent.description_Click(System.Object,System.EventArgs)">
      <summary>
Displays the description of the project that is clicked.</summary>
      <param name="sender">
link on the project name</param>
      <param name="e">
arguments given to this command (project id)</param>
    </member>
    <member name="T:PIManager.DAO.PersonAccess">
      <summary>
Gets information about a person from the database in the model form. This is a Data Access Object (DAO)</summary>
    </member>
    <member name="M:PIManager.DAO.PersonAccess.#ctor">
      <summary>
Constructor</summary>
    </member>
    <member name="M:PIManager.DAO.PersonAccess.getPersons(System.Int32)">
      <summary>
Get all person of the given role from the database</summary>
      <param name="role">
Role of the person. Sudent is 1 and professor is 2</param>
    </member>
    <member name="T:PIManager.Professor.Default">
    </member>
    <member name="T:PIManager.DAO.DBManager">
      <summary>
Manages access to the database</summary>
    </member>
    <member name="M:PIManager.DAO.DBManager.getLog">
    </member>
    <member name="M:PIManager.DAO.DBManager.newConnection">
      <summary>
Create a new connection to the database</summary>
    </member>
    <member name="M:PIManager.DAO.DBManager.doSelect(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
Perform a select query</summary>
      <param name="query">
</param>
      <param name="connection">
</param>
      <param name="transaction">
</param>
      <param name="param">
</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.doSelectScalar(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
Perform a select query returning a scalar value.</summary>
      <param name="query">
Query to execute</param>
      <param name="connection">
Connection to use</param>
      <param name="transaction">
Transaction to use</param>
      <param name="param">
Parameters to put for this query</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.doUpdate(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
Perform an update query <param name="query">Query to execute</param> <param name="connection">Connection to use</param> <param name="transaction">Transaction to use</param> <param name="param">Parameters to put for this query</param></summary>
      <param name="query">
Query to execute</param>
      <param name="connection">
Connection to use</param>
      <param name="transaction">
Transaction to use</param>
      <param name="param">
Parameters to put for this query</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.doDelete(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
Perform a delete query <param name="query">Query to execute</param> <param name="connection">Connection to use</param> <param name="transaction">Transaction to use</param> <param name="param">Parameters to put for this query</param></summary>
      <param name="query">
Query to execute</param>
      <param name="connection">
Connection to use</param>
      <param name="transaction">
Transaction to use</param>
      <param name="param">
Parameters to put for this query</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.doInsert(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
Perform an insert query <param name="query">Query to execute</param> <param name="connection">Connection to use</param> <param name="transaction">Transaction to use</param> <param name="param">Parameters to put for this query</param></summary>
      <param name="query">
Query to execute</param>
      <param name="connection">
Connection to use</param>
      <param name="transaction">
Transaction to use</param>
      <param name="param">
Parameters to put for this query</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.executeProcedure(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Collections.Generic.List{System.Data.SqlClient.SqlParameter})">
      <summary>
Execute a stored procedure <param name="name">Name of the stored procedure to execute</param> <param name="connection">Connection to use</param> <param name="transaction">Transaction to use</param> <param name="paramList">Parameters to put for this stored procedure</param></summary>
      <param name="name">
Name of the stored procedure to execute</param>
      <param name="connection">
Connection to use</param>
      <param name="transaction">
Transaction to use</param>
      <param name="paramList">
Parameters to put for this stored procedure</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.getPerson(System.String,System.String)">
      <param name="login">
</param>
      <param name="pass">
</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.getPersonType(System.Int32)">
      <param name="pk_person">
</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.getProjectInscriptions">
    </member>
    <member name="M:PIManager.DAO.DBManager.getFullProjects">
    </member>
    <member name="M:PIManager.DAO.DBManager.getPersonName(System.Int32)">
      <param name="pk_person">
</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.getProjectGroup(System.Int32)">
      <param name="pk_project">
</param>
    </member>
    <member name="M:PIManager.DAO.DBManager.getTechnologyProject(System.Int32)">
      <param name="pk_project">
</param>
    </member>
    <member name="M:PIManager.AddDocument.btnUpload_Click(System.Object,System.EventArgs)">
      <summary>
Adds a document to the project the student is subscribed to.</summary>
      <param name="sender">
button "envoyer"</param>
      <param name="e">
posted file</param>
    </member>
  </members>
</doc>
