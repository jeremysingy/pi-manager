<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet id="projectDescription" version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output version="4.0" method="html" encoding="UTF-8" />
  
  <!--  Template that generates the whole HTML page. It applies the different templates that 
         matches here (in this case only "project".-->
  <xsl:template match="/">  
    <html>
      <head>
        <title>
          Projet - <xsl:value-of select="project/title" />
        </title>
        <link rel="stylesheet" type="text/css" media="screen" href="projectDescription.css" />
      </head>
      <body>
        <div id="page">
          <xsl:apply-templates />
        </div>
      </body>
    </html>
  </xsl:template>

  <!-- Template that formats the project data. It parameters the title, the abreviation and the 
        number of students. For the description, a template is called. -->
  <xsl:template match="project">
    <h2>
      <xsl:value-of select="title" /> (<xsl:value-of select="abreviation" />)
    </h2>
    <h3>
      Nombre d'étudiants: <xsl:value-of select="student/text()" />
    </h3>
    <xsl:apply-templates select="description" />
  </xsl:template>

  <!-- Template that manages the creation of the description. The description must be represented 
        as a list. The list is generated by using a recursive call to the template called "recurselist". -->
  <xsl:template match="description" name="description">
    <h3>Description:</h3>
    <p>
      <xsl:value-of select="paragraph" />
    </p>
    <ul>
      <xsl:call-template name="recurselist">
        <xsl:with-param name="node" select="list" />
      </xsl:call-template>
    </ul>
  </xsl:template>

  <!-- Template that creates a recursive list. The list is composed each time of the alternate list 
        and listItem elements. Each time we have a text node in the listItem, and it is possible to 
        have no element list in the listItem. -->
  <xsl:template name="recurselist">
    <xsl:param name="node" />

    <xsl:for-each select="$node/*">
      <xsl:if test="name(current())='listItem'">

        <!-- We are in the node called "listItem" which has a child named "list". We write the 
              content of the node "text" and we recall this template to create the sub-list. -->
        <xsl:if test="count(current()/*)=2">
          <li>
            <xsl:value-of select="current()/text" />
            <ul>
              <xsl:call-template name="recurselist">
                <xsl:with-param name="node" select="." />
              </xsl:call-template>
            </ul>
          </li>
        </xsl:if>

        <!-- We are in the node called "listItem" which has no child named "list". We write the 
                content of the node "text" and recursive call is ended for this part of the list. -->
        <xsl:if test="count(current()/*)=1">
          <li>
            <xsl:value-of select="current()/text" />
          </li>
        </xsl:if>
      </xsl:if>

      <!-- We are in the node called "list". We just go to next level of the list to reach the 
              "listItem". -->
      <xsl:if test="name(current())!='listItem'">
        <xsl:call-template name="recurselist">
          <xsl:with-param name="node" select="." />
        </xsl:call-template>
      </xsl:if>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>